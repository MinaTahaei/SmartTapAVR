
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm Wed Dec 30 12:23:55 2020

C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Asus\Desktop\MicroProject-Phase2-MinaTahaei-DanialBazmandeh-AliAyati\CodeVision\Debug\List\project.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _second=R4
                 	.DEF _second_msb=R5
                 	.DEF _minute=R6
                 	.DEF _minute_msb=R7
                 	.DEF _hour=R8
                 	.DEF _hour_msb=R9
                 	.DEF _flag1=R10
                 	.DEF _flag1_msb=R11
                 	.DEF _flag2=R12
                 	.DEF _flag2_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0055 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0082 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x0:
000038 6154
000039 2070
00003a 464f
00003b 0046      	.DB  0x54,0x61,0x70,0x20,0x4F,0x46,0x46,0x0
00003c 6154
00003d 2070
00003e 4e4f
00003f 2500      	.DB  0x54,0x61,0x70,0x20,0x4F,0x4E,0x0,0x25
000040 3230
000041 3a64
000042 3025
000043 6432      	.DB  0x30,0x32,0x64,0x3A,0x25,0x30,0x32,0x64
000044 253a
000045 3230
000046 0064      	.DB  0x3A,0x25,0x30,0x32,0x64,0x0
                 _0x2000003:
000047 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000048 000a      	.DW  0x0A
000049 0004      	.DW  0x04
00004a 0066      	.DW  __REG_VARS*2
                 
00004b 0008      	.DW  0x08
00004c 0160      	.DW  _0xB
00004d 0070      	.DW  _0x0*2
                 
00004e 0007      	.DW  0x07
00004f 0168      	.DW  _0xB+8
000050 0078      	.DW  _0x0*2+8
                 
000051 0002      	.DW  0x02
000052 0183      	.DW  __base_y_G100
000053 008e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000054 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000055 94f8      	CLI
000056 27ee      	CLR  R30
000057 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000058 e0f1      	LDI  R31,1
000059 bffb      	OUT  GICR,R31
00005a bfeb      	OUT  GICR,R30
00005b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000065 93ed      	ST   X+,R30
000066 9701      	SBIW R24,1
000067 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000068 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000069 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006a 9185      	LPM  R24,Z+
00006b 9195      	LPM  R25,Z+
00006c 9700      	SBIW R24,0
00006d f061      	BREQ __GLOBAL_INI_END
00006e 91a5      	LPM  R26,Z+
00006f 91b5      	LPM  R27,Z+
000070 9005      	LPM  R0,Z+
000071 9015      	LPM  R1,Z+
000072 01bf      	MOVW R22,R30
000073 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000074 9005      	LPM  R0,Z+
000075 920d      	ST   X+,R0
000076 9701      	SBIW R24,1
000077 f7e1      	BRNE __GLOBAL_INI_LOOP
000078 01fb      	MOVW R30,R22
000079 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007b bfed      	OUT  SPL,R30
00007c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000080 940c 00ad 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;//Mina Tahaei , Danial Bazmandeh, Seyyed Ali Ayati
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;char buffer[20];
                 ;int second = 0 , minute = 0 , hour = 0 , flag1 = 0 , flag2 = 0;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000082 93ea      	ST   -Y,R30
000083 93fa      	ST   -Y,R31
000084 b7ef      	IN   R30,SREG
000085 93ea      	ST   -Y,R30
                 ; 0000 000C // bargardoondane maaghadir timer b 0
                 ; 0000 000D TCNT1H=0x85EE >> 8;
000086 e8e5      	LDI  R30,LOW(133)
000087 bded      	OUT  0x2D,R30
                 ; 0000 000E TCNT1L=0x85EE & 0xff;
000088 eeee      	LDI  R30,LOW(238)
000089 bdec      	OUT  0x2C,R30
                 ; 0000 000F 
                 ; 0000 0010 //har bar k vaghfe timer etefagh miofte bayad sanie ezafe she
                 ; 0000 0011 second++;
00008a 01f2      	MOVW R30,R4
00008b 9631      	ADIW R30,1
00008c 012f      	MOVW R4,R30
                 ; 0000 0012 if (second == 60) {second = 0;minute++;}
00008d e3ec      	LDI  R30,LOW(60)
00008e e0f0      	LDI  R31,HIGH(60)
00008f 15e4      	CP   R30,R4
000090 05f5      	CPC  R31,R5
000091 f429      	BRNE _0x3
000092 2444      	CLR  R4
000093 2455      	CLR  R5
000094 01f3      	MOVW R30,R6
000095 9631      	ADIW R30,1
000096 013f      	MOVW R6,R30
                 ; 0000 0013 if (minute == 60) {minute = 0;hour++;}
                 _0x3:
000097 e3ec      	LDI  R30,LOW(60)
000098 e0f0      	LDI  R31,HIGH(60)
000099 15e6      	CP   R30,R6
00009a 05f7      	CPC  R31,R7
00009b f429      	BRNE _0x4
00009c 2466      	CLR  R6
00009d 2477      	CLR  R7
00009e 01f4      	MOVW R30,R8
00009f 9631      	ADIW R30,1
0000a0 014f      	MOVW R8,R30
                 ; 0000 0014 if (hour == 24) hour = 0;
                 _0x4:
0000a1 e1e8      	LDI  R30,LOW(24)
0000a2 e0f0      	LDI  R31,HIGH(24)
0000a3 15e8      	CP   R30,R8
0000a4 05f9      	CPC  R31,R9
0000a5 f411      	BRNE _0x5
0000a6 2488      	CLR  R8
0000a7 2499      	CLR  R9
                 ; 0000 0015 }
                 _0x5:
0000a8 91e9      	LD   R30,Y+
0000a9 bfef      	OUT  SREG,R30
0000aa 91f9      	LD   R31,Y+
0000ab 91e9      	LD   R30,Y+
0000ac 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0018 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0019 
                 ; 0000 001A //tanzim portA b onvane voooroodi - bekhatere ADC
                 ; 0000 001B DDRA=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbea      	OUT  0x1A,R30
                 ; 0000 001C PORTA=0x00;
0000af bbeb      	OUT  0x1B,R30
                 ; 0000 001D //tanzim portB b onvane khoorooji
                 ; 0000 001E DDRB=0xff;
0000b0 efef      	LDI  R30,LOW(255)
0000b1 bbe7      	OUT  0x17,R30
                 ; 0000 001F PORTB=0x00;
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbe8      	OUT  0x18,R30
                 ; 0000 0020 // tanzim portC b onvane khoorooji barae etesale LCD
                 ; 0000 0021 DDRC=0xff;
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 0022 PORTC=0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe5      	OUT  0x15,R30
                 ; 0000 0023 //tanzim portD b onvane vooroodi - bekhatere vaqfe hae khareji
                 ; 0000 0024 DDRD=0x00;
0000b8 bbe1      	OUT  0x11,R30
                 ; 0000 0025 PORTD=0x00;
0000b9 bbe2      	OUT  0x12,R30
                 ; 0000 0026 
                 ; 0000 0027 //tanzimate timer - har 1 sanie vaqfe khahim dasht ta betoonim 1 sanie hae daqiq hesab konim
                 ; 0000 0028 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ba bdef      	OUT  0x2F,R30
                 ; 0000 0029 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000bb e0e4      	LDI  R30,LOW(4)
0000bc bdee      	OUT  0x2E,R30
                 ; 0000 002A TCNT1H=0x85;
0000bd e8e5      	LDI  R30,LOW(133)
0000be bded      	OUT  0x2D,R30
                 ; 0000 002B TCNT1L=0xEE;
0000bf eeee      	LDI  R30,LOW(238)
0000c0 bdec      	OUT  0x2C,R30
                 ; 0000 002C ICR1H=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bde7      	OUT  0x27,R30
                 ; 0000 002D ICR1L=0x00;
0000c3 bde6      	OUT  0x26,R30
                 ; 0000 002E OCR1AH=0x00;
0000c4 bdeb      	OUT  0x2B,R30
                 ; 0000 002F OCR1AL=0x00;
0000c5 bdea      	OUT  0x2A,R30
                 ; 0000 0030 OCR1BH=0x00;
0000c6 bde9      	OUT  0x29,R30
                 ; 0000 0031 OCR1BL=0x00;
0000c7 bde8      	OUT  0x28,R30
                 ; 0000 0032 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c8 e0e4      	LDI  R30,LOW(4)
0000c9 bfe9      	OUT  0x39,R30
                 ; 0000 0033 
                 ; 0000 0034 //tanzim LCD
                 ; 0000 0035 lcd_init(20);
0000ca e1a4      	LDI  R26,LOW(20)
0000cb d0b6      	RCALL _lcd_init
                 ; 0000 0036 
                 ; 0000 0037 
                 ; 0000 0038 while (1)
                 _0x6:
                 ; 0000 0039       {
                 ; 0000 003A         if (PIND.0 == 0)
0000cc 9980      	SBIC 0x10,0
0000cd c012      	RJMP _0x9
                 ; 0000 003B         {
                 ; 0000 003C             #asm("cli")
0000ce 94f8      	cli
                 ; 0000 003D 
                 ; 0000 003E             if (flag1 == 0)
0000cf 2c0a      	MOV  R0,R10
0000d0 280b      	OR   R0,R11
0000d1 f431      	BRNE _0xA
                 ; 0000 003F             {
                 ; 0000 0040                 lcd_clear();
0000d2 d070      	RCALL _lcd_clear
                 ; 0000 0041                 flag1 = 1;
0000d3 e0e1      	LDI  R30,LOW(1)
0000d4 e0f0      	LDI  R31,HIGH(1)
0000d5 015f      	MOVW R10,R30
                 ; 0000 0042                 flag2 = 0;
0000d6 24cc      	CLR  R12
0000d7 24dd      	CLR  R13
                 ; 0000 0043             }
                 ; 0000 0044             lcd_gotoxy(6,0);
                 _0xA:
0000d8 e0e6      	LDI  R30,LOW(6)
0000d9 93ea      	ST   -Y,R30
0000da e0a0      	LDI  R26,LOW(0)
0000db d056      	RCALL _lcd_gotoxy
                 ; 0000 0045             lcd_puts("Tap OFF");
                +
0000dc e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
0000dd e0b1     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
0000de d092      	RCALL _lcd_puts
                 ; 0000 0046             PORTB.0 = 0;
0000df 98c0      	CBI  0x18,0
                 ; 0000 0047 
                 ; 0000 0048         }
                 ; 0000 0049         if (PIND.0 == 1)
                 _0x9:
0000e0 9b80      	SBIS 0x10,0
0000e1 c012      	RJMP _0xE
                 ; 0000 004A         {
                 ; 0000 004B             #asm("sei")
0000e2 9478      	sei
                 ; 0000 004C             if (flag2 == 0)
0000e3 2c0c      	MOV  R0,R12
0000e4 280d      	OR   R0,R13
0000e5 f431      	BRNE _0xF
                 ; 0000 004D             {
                 ; 0000 004E                 lcd_clear();
0000e6 d05c      	RCALL _lcd_clear
                 ; 0000 004F                 flag1 = 0;
0000e7 24aa      	CLR  R10
0000e8 24bb      	CLR  R11
                 ; 0000 0050                 flag2 = 1;
0000e9 e0e1      	LDI  R30,LOW(1)
0000ea e0f0      	LDI  R31,HIGH(1)
0000eb 016f      	MOVW R12,R30
                 ; 0000 0051             }
                 ; 0000 0052             lcd_gotoxy(6,0);
                 _0xF:
0000ec e0e6      	LDI  R30,LOW(6)
0000ed 93ea      	ST   -Y,R30
0000ee e0a0      	LDI  R26,LOW(0)
0000ef d042      	RCALL _lcd_gotoxy
                 ; 0000 0053             lcd_puts("Tap ON");
                +
0000f0 e6a8     +LDI R26 , LOW ( _0xB + ( 8 ) )
0000f1 e0b1     +LDI R27 , HIGH ( _0xB + ( 8 ) )
                 	__POINTW2MN _0xB,8
0000f2 d07e      	RCALL _lcd_puts
                 ; 0000 0054             PORTB.0 = 1;
0000f3 9ac0      	SBI  0x18,0
                 ; 0000 0055         }
                 ; 0000 0056 
                 ; 0000 0057 
                 ; 0000 0058         sprintf(buffer,"%02d:%02d:%02d",hour,minute,second);
                 _0xE:
0000f4 e6ef      	LDI  R30,LOW(_buffer)
0000f5 e0f1      	LDI  R31,HIGH(_buffer)
0000f6 93fa      	ST   -Y,R31
0000f7 93ea      	ST   -Y,R30
                +
0000f8 e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 15 ) )
0000f9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW1FN _0x0,15
0000fa 93fa      	ST   -Y,R31
0000fb 93ea      	ST   -Y,R30
0000fc 01f4      	MOVW R30,R8
0000fd 940e 0372 	CALL SUBOPT_0x0
0000ff 01f3      	MOVW R30,R6
000100 940e 0372 	CALL SUBOPT_0x0
000102 01f2      	MOVW R30,R4
000103 940e 0372 	CALL SUBOPT_0x0
000105 e08c      	LDI  R24,12
000106 940e 0325 	CALL _sprintf
000108 9660      	ADIW R28,16
                 ; 0000 0059         lcd_gotoxy(6,1);
000109 e0e6      	LDI  R30,LOW(6)
00010a 93ea      	ST   -Y,R30
00010b e0a1      	LDI  R26,LOW(1)
00010c d025      	RCALL _lcd_gotoxy
                 ; 0000 005A         lcd_puts(buffer);
00010d e6af      	LDI  R26,LOW(_buffer)
00010e e0b1      	LDI  R27,HIGH(_buffer)
00010f d061      	RCALL _lcd_puts
                 ; 0000 005B 
                 ; 0000 005C       }
000110 cfbb      	RJMP _0x6
                 ; 0000 005D }
                 _0x12:
000111 cfff      	RJMP _0x12
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000160           	.BYTE 0xF
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000112 93aa      	ST   -Y,R26
000113 b3e5      	IN   R30,0x15
000114 70ef      	ANDI R30,LOW(0xF)
000115 2fae      	MOV  R26,R30
000116 81e8      	LD   R30,Y
000117 7fe0      	ANDI R30,LOW(0xF0)
000118 2bea      	OR   R30,R26
000119 bbe5      	OUT  0x15,R30
                +
00011a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00011b 958a     +DEC R24
00011c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00011d 9aaa      	SBI  0x15,2
                +
00011e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00011f 958a     +DEC R24
000120 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000121 98aa      	CBI  0x15,2
                +
000122 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000123 958a     +DEC R24
000124 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000125 c089      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000126 93aa      	ST   -Y,R26
000127 81a8      	LD   R26,Y
000128 dfe9      	RCALL __lcd_write_nibble_G100
000129 81e8          ld    r30,y
00012a 95e2          swap  r30
00012b 83e8          st    y,r30
00012c 81a8      	LD   R26,Y
00012d dfe4      	RCALL __lcd_write_nibble_G100
                +
00012e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00012f 958a     +DEC R24
000130 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000131 c07d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000132 93aa      	ST   -Y,R26
000133 81e8      	LD   R30,Y
000134 e0f0      	LDI  R31,0
000135 57ed      	SUBI R30,LOW(-__base_y_G100)
000136 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000137 81e0      	LD   R30,Z
000138 81a9      	LDD  R26,Y+1
000139 0fae      	ADD  R26,R30
00013a dfeb      	RCALL __lcd_write_data
00013b 81e9      	LDD  R30,Y+1
00013c 93e0 0187 	STS  __lcd_x,R30
00013e 81e8      	LD   R30,Y
00013f 93e0 0188 	STS  __lcd_y,R30
000141 9622      	ADIW R28,2
000142 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000143 e0a2      	LDI  R26,LOW(2)
000144 940e 0377 	CALL SUBOPT_0x1
000146 e0ac      	LDI  R26,LOW(12)
000147 dfde      	RCALL __lcd_write_data
000148 e0a1      	LDI  R26,LOW(1)
000149 940e 0377 	CALL SUBOPT_0x1
00014b e0e0      	LDI  R30,LOW(0)
00014c 93e0 0188 	STS  __lcd_y,R30
00014e 93e0 0187 	STS  __lcd_x,R30
000150 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000151 93aa      	ST   -Y,R26
000152 81a8      	LD   R26,Y
000153 30aa      	CPI  R26,LOW(0xA)
000154 f031      	BREQ _0x2000005
000155 91e0 0189 	LDS  R30,__lcd_maxx
000157 91a0 0187 	LDS  R26,__lcd_x
000159 17ae      	CP   R26,R30
00015a f060      	BRLO _0x2000004
                 _0x2000005:
00015b e0e0      	LDI  R30,LOW(0)
00015c 93ea      	ST   -Y,R30
00015d 91a0 0188 	LDS  R26,__lcd_y
00015f 5faf      	SUBI R26,-LOW(1)
000160 93a0 0188 	STS  __lcd_y,R26
000162 dfcf      	RCALL _lcd_gotoxy
000163 81a8      	LD   R26,Y
000164 30aa      	CPI  R26,LOW(0xA)
000165 f409      	BRNE _0x2000007
000166 c048      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000167 91e0 0187 	LDS  R30,__lcd_x
000169 5fef      	SUBI R30,-LOW(1)
00016a 93e0 0187 	STS  __lcd_x,R30
00016c 9aa8      	SBI  0x15,0
00016d 81a8      	LD   R26,Y
00016e dfb7      	RCALL __lcd_write_data
00016f 98a8      	CBI  0x15,0
000170 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000171 93ba      	ST   -Y,R27
000172 93aa      	ST   -Y,R26
000173 931a      	ST   -Y,R17
                 _0x2000008:
000174 81a9      	LDD  R26,Y+1
000175 81ba      	LDD  R27,Y+1+1
000176 91ed      	LD   R30,X+
000177 83a9      	STD  Y+1,R26
000178 83ba      	STD  Y+1+1,R27
000179 2f1e      	MOV  R17,R30
00017a 30e0      	CPI  R30,0
00017b f019      	BREQ _0x200000A
00017c 2fa1      	MOV  R26,R17
00017d dfd3      	RCALL _lcd_putchar
00017e cff5      	RJMP _0x2000008
                 _0x200000A:
00017f 8118      	LDD  R17,Y+0
000180 9623      	ADIW R28,3
000181 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000182 93aa      	ST   -Y,R26
000183 b3e4      	IN   R30,0x14
000184 6fe0      	ORI  R30,LOW(0xF0)
000185 bbe4      	OUT  0x14,R30
000186 9aa2      	SBI  0x14,2
000187 9aa0      	SBI  0x14,0
000188 9aa1      	SBI  0x14,1
000189 98aa      	CBI  0x15,2
00018a 98a8      	CBI  0x15,0
00018b 98a9      	CBI  0x15,1
00018c 81e8      	LD   R30,Y
00018d 93e0 0189 	STS  __lcd_maxx,R30
00018f 58e0      	SUBI R30,-LOW(128)
                +
000190 93e0 0185+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000192 81e8      	LD   R30,Y
000193 54e0      	SUBI R30,-LOW(192)
                +
000194 93e0 0186+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000196 e1a4      	LDI  R26,LOW(20)
000197 e0b0      	LDI  R27,0
000198 940e 03b1 	CALL _delay_ms
00019a 940e 037d 	CALL SUBOPT_0x2
00019c 940e 037d 	CALL SUBOPT_0x2
00019e 940e 037d 	CALL SUBOPT_0x2
0001a0 e2a0      	LDI  R26,LOW(32)
0001a1 df70      	RCALL __lcd_write_nibble_G100
                +
0001a2 ec88     +LDI R24 , LOW ( 200 )
0001a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a6 e2a8      	LDI  R26,LOW(40)
0001a7 df7e      	RCALL __lcd_write_data
0001a8 e0a4      	LDI  R26,LOW(4)
0001a9 df7c      	RCALL __lcd_write_data
0001aa e8a5      	LDI  R26,LOW(133)
0001ab df7a      	RCALL __lcd_write_data
0001ac e0a6      	LDI  R26,LOW(6)
0001ad df78      	RCALL __lcd_write_data
0001ae df94      	RCALL _lcd_clear
                 _0x2080002:
0001af 9621      	ADIW R28,1
0001b0 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001b1 93ba      	ST   -Y,R27
0001b2 93aa      	ST   -Y,R26
0001b3 931a      	ST   -Y,R17
0001b4 930a      	ST   -Y,R16
0001b5 81aa      	LDD  R26,Y+2
0001b6 81bb      	LDD  R27,Y+2+1
0001b7 9612      	ADIW R26,2
0001b8 940e 03c8 	CALL __GETW1P
0001ba 9730      	SBIW R30,0
0001bb f159      	BREQ _0x2020010
0001bc 81aa      	LDD  R26,Y+2
0001bd 81bb      	LDD  R27,Y+2+1
0001be 9614      	ADIW R26,4
0001bf 940e 03c8 	CALL __GETW1P
0001c1 018f      	MOVW R16,R30
0001c2 9730      	SBIW R30,0
0001c3 f061      	BREQ _0x2020012
                +
0001c4 3002     +CPI R16 , LOW ( 2 )
0001c5 e0e0     +LDI R30 , HIGH ( 2 )
0001c6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001c7 f098      	BRLO _0x2020013
0001c8 01f8      	MOVW R30,R16
0001c9 9731      	SBIW R30,1
0001ca 018f      	MOVW R16,R30
                +
0001cb 81aa     +LDD R26 , Y + 2
0001cc 81bb     +LDD R27 , Y + 2 + 1
0001cd 9614     +ADIW R26 , 4
0001ce 93ed     +ST X + , R30
0001cf 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001d0 81aa      	LDD  R26,Y+2
0001d1 81bb      	LDD  R27,Y+2+1
0001d2 9612      	ADIW R26,2
0001d3 91ed      	LD   R30,X+
0001d4 91fd      	LD   R31,X+
0001d5 9631      	ADIW R30,1
0001d6 93fe      	ST   -X,R31
0001d7 93ee      	ST   -X,R30
0001d8 9731      	SBIW R30,1
0001d9 81ac      	LDD  R26,Y+4
0001da 83a0      	STD  Z+0,R26
                 _0x2020013:
0001db 81aa      	LDD  R26,Y+2
0001dc 81bb      	LDD  R27,Y+2+1
0001dd 940e 03c8 	CALL __GETW1P
0001df 23ff      	TST  R31
0001e0 f02a      	BRMI _0x2020014
0001e1 91ed      	LD   R30,X+
0001e2 91fd      	LD   R31,X+
0001e3 9631      	ADIW R30,1
0001e4 93fe      	ST   -X,R31
0001e5 93ee      	ST   -X,R30
                 _0x2020014:
0001e6 c006      	RJMP _0x2020015
                 _0x2020010:
0001e7 81aa      	LDD  R26,Y+2
0001e8 81bb      	LDD  R27,Y+2+1
0001e9 efef      	LDI  R30,LOW(65535)
0001ea efff      	LDI  R31,HIGH(65535)
0001eb 93ed      	ST   X+,R30
0001ec 93fc      	ST   X,R31
                 _0x2020015:
0001ed 8119      	LDD  R17,Y+1
0001ee 8108      	LDD  R16,Y+0
0001ef 9625      	ADIW R28,5
0001f0 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001f1 93ba      	ST   -Y,R27
0001f2 93aa      	ST   -Y,R26
0001f3 9726      	SBIW R28,6
0001f4 940e 03d5 	CALL __SAVELOCR6
0001f6 e010      	LDI  R17,0
0001f7 85ac      	LDD  R26,Y+12
0001f8 85bd      	LDD  R27,Y+12+1
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa e0f0      	LDI  R31,HIGH(0)
0001fb 93ed      	ST   X+,R30
0001fc 93fc      	ST   X,R31
                 _0x2020016:
0001fd 89ea      	LDD  R30,Y+18
0001fe 89fb      	LDD  R31,Y+18+1
0001ff 9631      	ADIW R30,1
000200 8bea      	STD  Y+18,R30
000201 8bfb      	STD  Y+18+1,R31
000202 9731      	SBIW R30,1
000203 91e4      	LPM  R30,Z
000204 2f2e      	MOV  R18,R30
000205 30e0      	CPI  R30,0
000206 f409      	BRNE PC+2
000207 c115      	RJMP _0x2020018
000208 2fe1      	MOV  R30,R17
000209 30e0      	CPI  R30,0
00020a f439      	BRNE _0x202001C
00020b 3225      	CPI  R18,37
00020c f411      	BRNE _0x202001D
00020d e011      	LDI  R17,LOW(1)
00020e c002      	RJMP _0x202001E
                 _0x202001D:
00020f 940e 0385 	CALL SUBOPT_0x3
                 _0x202001E:
000211 c10a      	RJMP _0x202001B
                 _0x202001C:
000212 30e1      	CPI  R30,LOW(0x1)
000213 f4a9      	BRNE _0x202001F
000214 3225      	CPI  R18,37
000215 f419      	BRNE _0x2020020
000216 940e 0385 	CALL SUBOPT_0x3
000218 c102      	RJMP _0x20200CC
                 _0x2020020:
000219 e012      	LDI  R17,LOW(2)
00021a e040      	LDI  R20,LOW(0)
00021b e000      	LDI  R16,LOW(0)
00021c 322d      	CPI  R18,45
00021d f411      	BRNE _0x2020021
00021e e001      	LDI  R16,LOW(1)
00021f c0fc      	RJMP _0x202001B
                 _0x2020021:
000220 322b      	CPI  R18,43
000221 f411      	BRNE _0x2020022
000222 e24b      	LDI  R20,LOW(43)
000223 c0f8      	RJMP _0x202001B
                 _0x2020022:
000224 3220      	CPI  R18,32
000225 f411      	BRNE _0x2020023
000226 e240      	LDI  R20,LOW(32)
000227 c0f4      	RJMP _0x202001B
                 _0x2020023:
000228 c002      	RJMP _0x2020024
                 _0x202001F:
000229 30e2      	CPI  R30,LOW(0x2)
00022a f439      	BRNE _0x2020025
                 _0x2020024:
00022b e050      	LDI  R21,LOW(0)
00022c e013      	LDI  R17,LOW(3)
00022d 3320      	CPI  R18,48
00022e f411      	BRNE _0x2020026
00022f 6800      	ORI  R16,LOW(128)
000230 c0eb      	RJMP _0x202001B
                 _0x2020026:
000231 c003      	RJMP _0x2020027
                 _0x2020025:
000232 30e3      	CPI  R30,LOW(0x3)
000233 f009      	BREQ PC+2
000234 c0e7      	RJMP _0x202001B
                 _0x2020027:
000235 3320      	CPI  R18,48
000236 f010      	BRLO _0x202002A
000237 332a      	CPI  R18,58
000238 f008      	BRLO _0x202002B
                 _0x202002A:
000239 c007      	RJMP _0x2020029
                 _0x202002B:
00023a e0aa      	LDI  R26,LOW(10)
00023b 9f5a      	MUL  R21,R26
00023c 2d50      	MOV  R21,R0
00023d 2fe2      	MOV  R30,R18
00023e 53e0      	SUBI R30,LOW(48)
00023f 0f5e      	ADD  R21,R30
000240 c0db      	RJMP _0x202001B
                 _0x2020029:
000241 2fe2      	MOV  R30,R18
000242 36e3      	CPI  R30,LOW(0x63)
000243 f449      	BRNE _0x202002F
000244 940e 038c 	CALL SUBOPT_0x4
000246 89e8      	LDD  R30,Y+16
000247 89f9      	LDD  R31,Y+16+1
000248 81a4      	LDD  R26,Z+4
000249 93aa      	ST   -Y,R26
00024a 940e 0392 	CALL SUBOPT_0x5
00024c c0ce      	RJMP _0x2020030
                 _0x202002F:
00024d 37e3      	CPI  R30,LOW(0x73)
00024e f441      	BRNE _0x2020032
00024f 940e 038c 	CALL SUBOPT_0x4
000251 940e 0398 	CALL SUBOPT_0x6
000253 940e 0359 	CALL _strlen
000255 2f1e      	MOV  R17,R30
000256 c00a      	RJMP _0x2020033
                 _0x2020032:
000257 37e0      	CPI  R30,LOW(0x70)
000258 f461      	BRNE _0x2020035
000259 940e 038c 	CALL SUBOPT_0x4
00025b 940e 0398 	CALL SUBOPT_0x6
00025d 940e 0365 	CALL _strlenf
00025f 2f1e      	MOV  R17,R30
000260 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000261 6002      	ORI  R16,LOW(2)
000262 770f      	ANDI R16,LOW(127)
000263 e030      	LDI  R19,LOW(0)
000264 c034      	RJMP _0x2020036
                 _0x2020035:
000265 36e4      	CPI  R30,LOW(0x64)
000266 f011      	BREQ _0x2020039
000267 36e9      	CPI  R30,LOW(0x69)
000268 f411      	BRNE _0x202003A
                 _0x2020039:
000269 6004      	ORI  R16,LOW(4)
00026a c002      	RJMP _0x202003B
                 _0x202003A:
00026b 37e5      	CPI  R30,LOW(0x75)
00026c f431      	BRNE _0x202003C
                 _0x202003B:
00026d e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00026e e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00026f 83ee      	STD  Y+6,R30
000270 83ff      	STD  Y+6+1,R31
000271 e015      	LDI  R17,LOW(5)
000272 c00c      	RJMP _0x202003D
                 _0x202003C:
000273 35e8      	CPI  R30,LOW(0x58)
000274 f411      	BRNE _0x202003F
000275 6008      	ORI  R16,LOW(8)
000276 c003      	RJMP _0x2020040
                 _0x202003F:
000277 37e8      	CPI  R30,LOW(0x78)
000278 f009      	BREQ PC+2
000279 c0a1      	RJMP _0x2020071
                 _0x2020040:
00027a e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00027b e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00027c 83ee      	STD  Y+6,R30
00027d 83ff      	STD  Y+6+1,R31
00027e e014      	LDI  R17,LOW(4)
                 _0x202003D:
00027f ff02      	SBRS R16,2
000280 c014      	RJMP _0x2020042
000281 940e 038c 	CALL SUBOPT_0x4
000283 940e 03a2 	CALL SUBOPT_0x7
000285 85ab      	LDD  R26,Y+11
000286 23aa      	TST  R26
000287 f43a      	BRPL _0x2020043
000288 85ea      	LDD  R30,Y+10
000289 85fb      	LDD  R31,Y+10+1
00028a 940e 03bf 	CALL __ANEGW1
00028c 87ea      	STD  Y+10,R30
00028d 87fb      	STD  Y+10+1,R31
00028e e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00028f 3040      	CPI  R20,0
000290 f011      	BREQ _0x2020044
000291 5f1f      	SUBI R17,-LOW(1)
000292 c001      	RJMP _0x2020045
                 _0x2020044:
000293 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000294 c004      	RJMP _0x2020046
                 _0x2020042:
000295 940e 038c 	CALL SUBOPT_0x4
000297 940e 03a2 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000299 fd00      	SBRC R16,0
00029a c011      	RJMP _0x2020047
                 _0x2020048:
00029b 1715      	CP   R17,R21
00029c f478      	BRSH _0x202004A
00029d ff07      	SBRS R16,7
00029e c008      	RJMP _0x202004B
00029f ff02      	SBRS R16,2
0002a0 c004      	RJMP _0x202004C
0002a1 7f0b      	ANDI R16,LOW(251)
0002a2 2f24      	MOV  R18,R20
0002a3 5011      	SUBI R17,LOW(1)
0002a4 c001      	RJMP _0x202004D
                 _0x202004C:
0002a5 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002a6 c001      	RJMP _0x202004E
                 _0x202004B:
0002a7 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002a8 940e 0385 	CALL SUBOPT_0x3
0002aa 5051      	SUBI R21,LOW(1)
0002ab cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002ac 2f31      	MOV  R19,R17
0002ad ff01      	SBRS R16,1
0002ae c017      	RJMP _0x202004F
                 _0x2020050:
0002af 3030      	CPI  R19,0
0002b0 f0a1      	BREQ _0x2020052
0002b1 ff03      	SBRS R16,3
0002b2 c006      	RJMP _0x2020053
0002b3 81ee      	LDD  R30,Y+6
0002b4 81ff      	LDD  R31,Y+6+1
0002b5 9125      	LPM  R18,Z+
0002b6 83ee      	STD  Y+6,R30
0002b7 83ff      	STD  Y+6+1,R31
0002b8 c005      	RJMP _0x2020054
                 _0x2020053:
0002b9 81ae      	LDD  R26,Y+6
0002ba 81bf      	LDD  R27,Y+6+1
0002bb 912d      	LD   R18,X+
0002bc 83ae      	STD  Y+6,R26
0002bd 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002be 940e 0385 	CALL SUBOPT_0x3
0002c0 3050      	CPI  R21,0
0002c1 f009      	BREQ _0x2020055
0002c2 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002c3 5031      	SUBI R19,LOW(1)
0002c4 cfea      	RJMP _0x2020050
                 _0x2020052:
0002c5 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002c6 e320      	LDI  R18,LOW(48)
0002c7 81ee      	LDD  R30,Y+6
0002c8 81ff      	LDD  R31,Y+6+1
0002c9 940e 03cc 	CALL __GETW1PF
0002cb 87e8      	STD  Y+8,R30
0002cc 87f9      	STD  Y+8+1,R31
0002cd 81ee      	LDD  R30,Y+6
0002ce 81ff      	LDD  R31,Y+6+1
0002cf 9632      	ADIW R30,2
0002d0 83ee      	STD  Y+6,R30
0002d1 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002d2 85e8      	LDD  R30,Y+8
0002d3 85f9      	LDD  R31,Y+8+1
0002d4 85aa      	LDD  R26,Y+10
0002d5 85bb      	LDD  R27,Y+10+1
0002d6 17ae      	CP   R26,R30
0002d7 07bf      	CPC  R27,R31
0002d8 f050      	BRLO _0x202005C
0002d9 5f2f      	SUBI R18,-LOW(1)
0002da 85a8      	LDD  R26,Y+8
0002db 85b9      	LDD  R27,Y+8+1
0002dc 85ea      	LDD  R30,Y+10
0002dd 85fb      	LDD  R31,Y+10+1
0002de 1bea      	SUB  R30,R26
0002df 0bfb      	SBC  R31,R27
0002e0 87ea      	STD  Y+10,R30
0002e1 87fb      	STD  Y+10+1,R31
0002e2 cfef      	RJMP _0x202005A
                 _0x202005C:
0002e3 332a      	CPI  R18,58
0002e4 f028      	BRLO _0x202005D
0002e5 ff03      	SBRS R16,3
0002e6 c002      	RJMP _0x202005E
0002e7 5f29      	SUBI R18,-LOW(7)
0002e8 c001      	RJMP _0x202005F
                 _0x202005E:
0002e9 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002ea fd04      	SBRC R16,4
0002eb c01a      	RJMP _0x2020061
0002ec 3321      	CPI  R18,49
0002ed f420      	BRSH _0x2020063
0002ee 85a8      	LDD  R26,Y+8
0002ef 85b9      	LDD  R27,Y+8+1
0002f0 9711      	SBIW R26,1
0002f1 f409      	BRNE _0x2020062
                 _0x2020063:
0002f2 c009      	RJMP _0x20200CD
                 _0x2020062:
0002f3 1753      	CP   R21,R19
0002f4 f010      	BRLO _0x2020067
0002f5 ff00      	SBRS R16,0
0002f6 c001      	RJMP _0x2020068
                 _0x2020067:
0002f7 c013      	RJMP _0x2020066
                 _0x2020068:
0002f8 e220      	LDI  R18,LOW(32)
0002f9 ff07      	SBRS R16,7
0002fa c00b      	RJMP _0x2020069
0002fb e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002fc 6100      	ORI  R16,LOW(16)
0002fd ff02      	SBRS R16,2
0002fe c007      	RJMP _0x202006A
0002ff 7f0b      	ANDI R16,LOW(251)
000300 934a      	ST   -Y,R20
000301 940e 0392 	CALL SUBOPT_0x5
000303 3050      	CPI  R21,0
000304 f009      	BREQ _0x202006B
000305 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000306 940e 0385 	CALL SUBOPT_0x3
000308 3050      	CPI  R21,0
000309 f009      	BREQ _0x202006C
00030a 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00030b 5031      	SUBI R19,LOW(1)
00030c 85a8      	LDD  R26,Y+8
00030d 85b9      	LDD  R27,Y+8+1
00030e 9712      	SBIW R26,2
00030f f008      	BRLO _0x2020059
000310 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000311 ff00      	SBRS R16,0
000312 c008      	RJMP _0x202006D
                 _0x202006E:
000313 3050      	CPI  R21,0
000314 f031      	BREQ _0x2020070
000315 5051      	SUBI R21,LOW(1)
000316 e2e0      	LDI  R30,LOW(32)
000317 93ea      	ST   -Y,R30
000318 940e 0392 	CALL SUBOPT_0x5
00031a cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00031b e010      	LDI  R17,LOW(0)
                 _0x202001B:
00031c cee0      	RJMP _0x2020016
                 _0x2020018:
00031d 85ac      	LDD  R26,Y+12
00031e 85bd      	LDD  R27,Y+12+1
00031f 940e 03c8 	CALL __GETW1P
000321 940e 03dc 	CALL __LOADLOCR6
000323 9664      	ADIW R28,20
000324 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000325 92ff      	PUSH R15
000326 2ef8      	MOV  R15,R24
000327 9726      	SBIW R28,6
000328 940e 03d7 	CALL __SAVELOCR4
00032a 940e 03aa 	CALL SUBOPT_0x8
00032c 9730      	SBIW R30,0
00032d f419      	BRNE _0x2020072
00032e efef      	LDI  R30,LOW(65535)
00032f efff      	LDI  R31,HIGH(65535)
000330 c023      	RJMP _0x2080001
                 _0x2020072:
000331 01de      	MOVW R26,R28
000332 9616      	ADIW R26,6
000333 940e 03bb 	CALL __ADDW2R15
000335 018d      	MOVW R16,R26
000336 940e 03aa 	CALL SUBOPT_0x8
000338 83ee      	STD  Y+6,R30
000339 83ff      	STD  Y+6+1,R31
00033a e0e0      	LDI  R30,LOW(0)
00033b 87e8      	STD  Y+8,R30
00033c 87e9      	STD  Y+8+1,R30
00033d 01de      	MOVW R26,R28
00033e 961a      	ADIW R26,10
00033f 940e 03bb 	CALL __ADDW2R15
000341 940e 03c8 	CALL __GETW1P
000343 93fa      	ST   -Y,R31
000344 93ea      	ST   -Y,R30
000345 931a      	ST   -Y,R17
000346 930a      	ST   -Y,R16
000347 ebe1      	LDI  R30,LOW(_put_buff_G101)
000348 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000349 93fa      	ST   -Y,R31
00034a 93ea      	ST   -Y,R30
00034b 01de      	MOVW R26,R28
00034c 961a      	ADIW R26,10
00034d dea3      	RCALL __print_G101
00034e 019f      	MOVW R18,R30
00034f 81ae      	LDD  R26,Y+6
000350 81bf      	LDD  R27,Y+6+1
000351 e0e0      	LDI  R30,LOW(0)
000352 93ec      	ST   X,R30
000353 01f9      	MOVW R30,R18
                 _0x2080001:
000354 940e 03de 	CALL __LOADLOCR4
000356 962a      	ADIW R28,10
000357 90ff      	POP  R15
000358 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000359 93ba      	ST   -Y,R27
00035a 93aa      	ST   -Y,R26
00035b 91a9          ld   r26,y+
00035c 91b9          ld   r27,y+
00035d 27ee          clr  r30
00035e 27ff          clr  r31
                 strlen0:
00035f 916d          ld   r22,x+
000360 2366          tst  r22
000361 f011          breq strlen1
000362 9631          adiw r30,1
000363 cffb          rjmp strlen0
                 strlen1:
000364 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000365 93ba      	ST   -Y,R27
000366 93aa      	ST   -Y,R26
000367 27aa          clr  r26
000368 27bb          clr  r27
000369 91e9          ld   r30,y+
00036a 91f9          ld   r31,y+
                 strlenf0:
00036b 9005      	lpm  r0,z+
00036c 2000          tst  r0
00036d f011          breq strlenf1
00036e 9611          adiw r26,1
00036f cffb          rjmp strlenf0
                 strlenf1:
000370 01fd          movw r30,r26
000371 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
00016f           	.BYTE 0x14
                 __base_y_G100:
000183           	.BYTE 0x4
                 __lcd_x:
000187           	.BYTE 0x1
                 __lcd_y:
000188           	.BYTE 0x1
                 __lcd_maxx:
000189           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000372 940e 03c3 	CALL __CWD1
000374 940e 03d0 	CALL __PUTPARD1
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000377 940e 0126 	CALL __lcd_write_data
000379 e0a3      	LDI  R26,LOW(3)
00037a e0b0      	LDI  R27,0
00037b 940c 03b1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00037d e3a0      	LDI  R26,LOW(48)
00037e 940e 0112 	CALL __lcd_write_nibble_G100
                +
000380 ec88     +LDI R24 , LOW ( 200 )
000381 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000382 9701     +SBIW R24 , 1
000383 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000384 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000385 932a      	ST   -Y,R18
000386 85ad      	LDD  R26,Y+13
000387 85be      	LDD  R27,Y+13+1
000388 85ef      	LDD  R30,Y+15
000389 89f8      	LDD  R31,Y+15+1
00038a 9509      	ICALL
00038b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00038c 89e8      	LDD  R30,Y+16
00038d 89f9      	LDD  R31,Y+16+1
00038e 9734      	SBIW R30,4
00038f 8be8      	STD  Y+16,R30
000390 8bf9      	STD  Y+16+1,R31
000391 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000392 85ad      	LDD  R26,Y+13
000393 85be      	LDD  R27,Y+13+1
000394 85ef      	LDD  R30,Y+15
000395 89f8      	LDD  R31,Y+15+1
000396 9509      	ICALL
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000398 89a8      	LDD  R26,Y+16
000399 89b9      	LDD  R27,Y+16+1
00039a 9614      	ADIW R26,4
00039b 940e 03c8 	CALL __GETW1P
00039d 83ee      	STD  Y+6,R30
00039e 83ff      	STD  Y+6+1,R31
00039f 81ae      	LDD  R26,Y+6
0003a0 81bf      	LDD  R27,Y+6+1
0003a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0003a2 89a8      	LDD  R26,Y+16
0003a3 89b9      	LDD  R27,Y+16+1
0003a4 9614      	ADIW R26,4
0003a5 940e 03c8 	CALL __GETW1P
0003a7 87ea      	STD  Y+10,R30
0003a8 87fb      	STD  Y+10+1,R31
0003a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003aa 01de      	MOVW R26,R28
0003ab 961c      	ADIW R26,12
0003ac 940e 03bb 	CALL __ADDW2R15
0003ae 940e 03c8 	CALL __GETW1P
0003b0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003b1 9610      	adiw r26,0
0003b2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003b3 ed80     +LDI R24 , LOW ( 0x7D0 )
0003b4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003b5 9701     +SBIW R24 , 1
0003b6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003b7 95a8      	wdr
0003b8 9711      	sbiw r26,1
0003b9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003ba 9508      	ret
                 
                 __ADDW2R15:
0003bb 2400      	CLR  R0
0003bc 0daf      	ADD  R26,R15
0003bd 1db0      	ADC  R27,R0
0003be 9508      	RET
                 
                 __ANEGW1:
0003bf 95f1      	NEG  R31
0003c0 95e1      	NEG  R30
0003c1 40f0      	SBCI R31,0
0003c2 9508      	RET
                 
                 __CWD1:
0003c3 2f6f      	MOV  R22,R31
0003c4 0f66      	ADD  R22,R22
0003c5 0b66      	SBC  R22,R22
0003c6 2f76      	MOV  R23,R22
0003c7 9508      	RET
                 
                 __GETW1P:
0003c8 91ed      	LD   R30,X+
0003c9 91fc      	LD   R31,X
0003ca 9711      	SBIW R26,1
0003cb 9508      	RET
                 
                 __GETW1PF:
0003cc 9005      	LPM  R0,Z+
0003cd 91f4      	LPM  R31,Z
0003ce 2de0      	MOV  R30,R0
0003cf 9508      	RET
                 
                 __PUTPARD1:
0003d0 937a      	ST   -Y,R23
0003d1 936a      	ST   -Y,R22
0003d2 93fa      	ST   -Y,R31
0003d3 93ea      	ST   -Y,R30
0003d4 9508      	RET
                 
                 __SAVELOCR6:
0003d5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003d6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003d7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003d8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003d9 931a      	ST   -Y,R17
0003da 930a      	ST   -Y,R16
0003db 9508      	RET
                 
                 __LOADLOCR6:
0003dc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003dd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003de 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003df 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003e0 8119      	LDD  R17,Y+1
0003e1 8108      	LD   R16,Y
0003e2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   5 r7 :   2 
r8 :   5 r9 :   2 r10:   3 r11:   2 r12:   3 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   5 r26: 105 r27:  39 r28:  14 r29:   1 r30: 221 r31:  68 
x  :  23 y  : 173 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  27 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  52 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  17 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   3 inc   :   0 jmp   :  23 ld    :  29 ldd   :  75 ldi   : 115 
lds   :   4 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  18 movw  :  25 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   7 out   :  30 pop   :   1 push  :   1 rcall :  23 ret   :  26 
reti  :   1 rjmp  :  61 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   6 sbic  :   1 sbis  :   1 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  31 sts   :   9 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007c6   1904     86   1990   16384  12.1%
[.dseg] 0x000060 0x00018a      0     42     42    1024   4.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
