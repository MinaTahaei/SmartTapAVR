;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Smart Water Tap
;Version : 3
;Date    : 2021-01-30
;Author  : Seyyed Ali Ayati, Mina Tahaei, Danial Bazmandeh
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;// Declare your global variables here
;int hour = 0;
;int minute = 0;
;int second = 0;
;unsigned char is_on = 0;
;
;/*
;    LCD DRIVER By Seyyed Ali Ayati
;*/
;#define LCD_DATA PORTB  // Port B as data
;#define ctrl PORTD      // Port D as Controller
;#define en PIND.2       // Enable: D2
;#define rw PIND.1       // RW: D1
;#define rs PIND.0       // RS: D0
;void LCD_cmd(unsigned char cmd);
;void init_LCD(void);
;void LCD_write(unsigned char data);
;
;void init_LCD(void)   // Initialize the LCD
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030     LCD_cmd(0x38);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0031     delay_ms(1);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0032     LCD_cmd(0x01); // 16, Mode: 8 Bits
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033     delay_ms(1);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0034     LCD_cmd(0x0E); // Clear Screen
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0035     delay_ms(1);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0036     LCD_cmd(0x80); // Goto 0,0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0037     delay_ms(1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0038     return;
;PCODE: $00000023 VOL: 0
; 0000 0039 }
;PCODE: $00000024 VOL: 0
;
;void LCD_cmd(unsigned char cmd)  // Send Command to LCD
; 0000 003C {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003D     LCD_DATA=cmd;
;PCODE: $00000027 VOL: 0
;	cmd -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003E     ctrl=0x04;               // Enable=1
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003F     delay_ms(1);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040     ctrl=0x00;                // Enable=0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041     delay_ms(50);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0042     return;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0043 }
;PCODE: $00000036 VOL: 0
;
;void LCD_write(unsigned char data)   // Write data on LCD
; 0000 0046 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0047     LCD_DATA= data;
;PCODE: $00000039 VOL: 0
;	data -> Y+0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0048     ctrl=0x05;                 // Enable=1 and Select Registers
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049     delay_ms(1);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004A     ctrl=0x01;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004B     delay_ms(50);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004C     return ;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004D }
;PCODE: $00000048 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0051 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0052 // Reinitialize Timer1 value
; 0000 0053 TCNT1H=0x85EE >> 8;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0054 TCNT1L=0x85EE & 0xff;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0055 // Place your code here
; 0000 0056 if(is_on)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0057 {
; 0000 0058     second++;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0059     if (second == 60)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005A     {
; 0000 005B         second = 0;
;PCODE: $00000057 VOL: 0
; 0000 005C         minute++;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005D         if (minute == 60)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005E         {
; 0000 005F             minute = 0;
;PCODE: $0000005E VOL: 0
; 0000 0060             hour++;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0061             if(hour == 24)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0062             {
; 0000 0063                 hour = 0;
;PCODE: $00000065 VOL: 0
; 0000 0064             }
; 0000 0065         }
;PCODE: $00000066 VOL: 0
; 0000 0066     }
;PCODE: $00000067 VOL: 0
; 0000 0067 }
;PCODE: $00000068 VOL: 0
; 0000 0068 
; 0000 0069 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void main(void)
; 0000 006C {
;PCODE: $0000006D VOL: 0
; 0000 006D // Declare your local variables here
; 0000 006E unsigned char i,microlearn[8]="On Time";
; 0000 006F 
; 0000 0070 // Input/Output Ports initialization
; 0000 0071 
; 0000 0072 // Port A initialization
; 0000 0073 DDRA=0xFF; // All Output
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	i -> R17
;	microlearn -> Y+0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0074 PORTA=0x02;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0075 
; 0000 0076 // Port B initialization
; 0000 0077 DDRB=0xFF; // All Output
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0078 PORTB=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0079 
; 0000 007A // Port C initialization
; 0000 007B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007C DDRC=0x00; // All Input
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007E PORTC=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F 
; 0000 0080 // Port D initialization
; 0000 0081 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0082 DDRD=0x07; // First 3 bits as Output
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0083 PORTD=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0084 
; 0000 0085 
; 0000 0086 // Timer/Counter 1 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: 31.250 kHz
; 0000 0089 // Mode: Normal top=0xFFFF
; 0000 008A // OC1A output: Disconnected
; 0000 008B // OC1B output: Disconnected
; 0000 008C // Noise Canceler: Off
; 0000 008D // Input Capture on Falling Edge
; 0000 008E // Timer Period: 1 s
; 0000 008F // Timer1 Overflow Interrupt: On
; 0000 0090 // Input Capture Interrupt: Off
; 0000 0091 // Compare A Match Interrupt: Off
; 0000 0092 // Compare B Match Interrupt: Off
; 0000 0093 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0094 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0095 TCNT1H=0x85;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0096 TCNT1L=0xEE;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0097 ICR1H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0098 ICR1L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0099 OCR1AH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009A OCR1AL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009B OCR1BH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 009C OCR1BL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 009D 
; 0000 009E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A0 
; 0000 00A1 // Global enable interrupts
; 0000 00A2 #asm("sei")
;PCODE: $000000A5 VOL: 0
	sei
;PCODE: $000000A6 VOL: 0
; 0000 00A3 
; 0000 00A4 init_LCD();
;PCODE: $000000A7 VOL: 0
; 0000 00A5 LCD_cmd(0x01); // Clear Screen
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A6 LCD_cmd(0x0C); // Hide Cursor
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A7 
; 0000 00A8 // Write On Time
; 0000 00A9 for(i=0;i<7;i++)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AA {
; 0000 00AB     LCD_write(microlearn[i]);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00AC }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AD for(i=7;i<20;i++)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00AE {
; 0000 00AF     LCD_cmd(0x14);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B0 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B1 
; 0000 00B2 
; 0000 00B3 
; 0000 00B4 while (1)
;PCODE: $000000D0 VOL: 0
; 0000 00B5       {
; 0000 00B6       // Place your code here
; 0000 00B7       // delay_ms(1000);
; 0000 00B8       is_on = PINC.0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00B9       PORTA.0 = is_on;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00BA 
; 0000 00BB       // Show Timer
; 0000 00BC       LCD_write('0' + hour / 10);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00BD       LCD_write('0' + hour % 10);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00BE       LCD_write(58);             // :
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00BF       LCD_write('0' + minute / 10);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00C0       LCD_write('0' + minute % 10);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00C1       LCD_write(58);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00C2       LCD_write('0' + second / 10);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C3       LCD_write('0' + second % 10);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C4 
; 0000 00C5       for(i=0;i<8;i++)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C6         {
; 0000 00C7             LCD_cmd(0x10); // Move -1
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C8         }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C9 
; 0000 00CA       }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00CB }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
